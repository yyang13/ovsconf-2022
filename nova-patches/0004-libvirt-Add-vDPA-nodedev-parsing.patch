From df275548ed3e61e8d74012703c3a965b4c246324 Mon Sep 17 00:00:00 2001
From: Sean Mooney <work@seanmooney.info>
Date: Wed, 13 Jan 2021 03:55:02 +0000
Subject: [PATCH 4/7] libvirt: Add vDPA nodedev parsing

Add the ability to look up vDPA nodedevs via their parent VF and
marshal the result into a nodedev object. This requires a new version of
libvirt and QEMU so we must add constants to protect that.

Blueprint: libvirt-vdpa-support
---
 nova/virt/libvirt/config.py | 22 ++++++++++++++
 nova/virt/libvirt/driver.py | 21 ++++++++++---
 nova/virt/libvirt/host.py   | 60 +++++++++++++++++++++++++++++++++----
 3 files changed, 94 insertions(+), 9 deletions(-)

diff --git a/nova/virt/libvirt/config.py b/nova/virt/libvirt/config.py
index af777ea3b2..e41782c58e 100644
--- a/nova/virt/libvirt/config.py
+++ b/nova/virt/libvirt/config.py
@@ -3070,6 +3070,7 @@ class LibvirtConfigNodeDevice(LibvirtConfigObject):
         self.parent = None
         self.pci_capability = None
         self.mdev_information = None
+        self.vdpa_capability = None
 
     def parse_dom(self, xmldoc):
         super(LibvirtConfigNodeDevice, self).parse_dom(xmldoc)
@@ -3087,6 +3088,23 @@ class LibvirtConfigNodeDevice(LibvirtConfigObject):
                 mdev_info = LibvirtConfigNodeDeviceMdevInformation()
                 mdev_info.parse_dom(c)
                 self.mdev_information = mdev_info
+            elif c.tag == "capability" and c.get("type") in ['vdpa']:
+                vdpa_caps = LibvirtConfigNodeDeviceVDPACap()
+                vdpa_caps.parse_dom(c)
+                self.vdpa_capability = vdpa_caps
+
+
+class LibvirtConfigNodeDeviceVDPACap(LibvirtConfigObject):
+    def __init__(self, **kwargs):
+        super().__init__(
+            root_name="capability", **kwargs)
+        self.dev_path = None
+
+    def parse_dom(self, xmldoc):
+        super().parse_dom(xmldoc)
+        for c in xmldoc:
+            if c.tag == "chardev":
+                self.dev_path = c.text
 
 
 class LibvirtConfigNodeDevicePciCap(LibvirtConfigObject):
@@ -3149,6 +3167,10 @@ class LibvirtConfigNodeDevicePciCap(LibvirtConfigObject):
                 mdevcap.parse_dom(c)
                 self.mdev_capability.append(mdevcap)
 
+    def pci_address(self):
+        return "%04x:%02x:%02x.%01x" % (
+            self.domain, self.bus, self.slot, self.function)
+
 
 class LibvirtConfigNodeDevicePciSubFunctionCap(LibvirtConfigObject):
     def __init__(self, **kwargs):
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 091bce4f58..d770f350d9 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -241,6 +241,10 @@ NEXT_MIN_QEMU_VERSION = (4, 2, 0)
 # Virtuozzo driver support
 MIN_VIRTUOZZO_VERSION = (7, 0, 0)
 
+# VDPA interface support
+MIN_LIBVIRT_VDPA = (6, 9, 0)
+MIN_QEMU_VDPA = (5, 1, 0)
+
 
 # Names of the types that do not get compressed during migration
 NO_COMPRESSION_TYPES = ('qcow2',)
@@ -7219,18 +7223,27 @@ class LibvirtDriver(driver.ComputeDriver):
         :returns: a JSON string containing a list of the assignable PCI
                   devices information
         """
-        dev_flags = (libvirt.VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET |
-                     libvirt.VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV)
+        dev_flags = (
+            libvirt.VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET |
+            libvirt.VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV
+        )
+        if self._host.has_min_version(
+            lv_ver=MIN_LIBVIRT_VDPA, hv_ver=MIN_QEMU_VDPA,
+        ):
+            dev_flags |= libvirt.VIR_CONNECT_LIST_NODE_DEVICES_CAP_VDPA
+
         devices = {
             dev.name(): dev for dev in
             self._host.list_all_devices(flags=dev_flags)
         }
         net_devs = [dev for dev in devices.values() if "net" in dev.listCaps()]
+        vdpa_devs = [
+            dev for dev in devices.values() if "vdpa" in dev.listCaps()
+        ]
         pci_info = [
-            self._host._get_pcidev_info(name, dev, net_devs)
+            self._host._get_pcidev_info(name, dev, net_devs, vdpa_devs)
             for name, dev in devices.items() if "pci" in dev.listCaps()
         ]
-
         return jsonutils.dumps(pci_info)
 
     def _get_mdev_capabilities_for_dev(self, devname, types=None):
diff --git a/nova/virt/libvirt/host.py b/nova/virt/libvirt/host.py
index c90123b517..071633ad48 100644
--- a/nova/virt/libvirt/host.py
+++ b/nova/virt/libvirt/host.py
@@ -1171,7 +1171,8 @@ class Host(object):
         self,
         devname: str,
         dev: 'libvirt.virNodeDevice',
-        net_devs: ty.List['libvirt.virNodeDevice']
+        net_devs: ty.List['libvirt.virNodeDevice'],
+        vdpa_devs: ty.List['libvirt.virNodeDevice'],
     ) -> ty.Dict[str, ty.Union[str, dict]]:
         """Returns a dict of PCI device."""
 
@@ -1179,7 +1180,8 @@ class Host(object):
             cfgdev: vconfig.LibvirtConfigNodeDevice,
             pci_address: str,
             device: 'libvirt.virNodeDevice',
-            net_devs: ty.List['libvirt.virNodeDevice']
+            net_devs: ty.List['libvirt.virNodeDevice'],
+            vdpa_devs: ty.List['libvirt.virNodeDevice'],
         ) -> ty.Dict[str, str]:
             """Get a PCI device's device type.
 
@@ -1188,6 +1190,7 @@ class Host(object):
             Function (VF).
             """
             net_dev_parents = {dev.parent() for dev in net_devs}
+            vdpa_parents = {dev.parent() for dev in vdpa_devs}
             for fun_cap in cfgdev.pci_capability.fun_capability:
                 if fun_cap.type == 'virt_functions':
                     return {
@@ -1213,6 +1216,8 @@ class Host(object):
                         parent_ifname = pci_utils.get_ifname_by_pci_address(
                             pci_address, pf_interface=True)
                         result['parent_ifname'] = parent_ifname
+                    if device.name() in vdpa_parents:
+                        result['dev_type'] = fields.PciDeviceType.VDPA
                     return result
 
             return {'dev_type': fields.PciDeviceType.STANDARD}
@@ -1221,18 +1226,20 @@ class Host(object):
             device_dict: dict,
             device: 'libvirt.virNodeDevice',
             net_devs: ty.List['libvirt.virNodeDevice']
-        ) -> ty.Dict[str, ty.Dict[str, ty.Optional[ty.List[str]]]]:
+        ) -> ty.Dict[str, ty.Dict[str, ty.Any]]:
             """Get PCI VF device's additional capabilities.
 
             If a PCI device is a virtual function, this function reads the PCI
             parent's network capabilities (must be always a NIC device) and
             appends this information to the device's dictionary.
             """
+            caps: ty.Dict[str, ty.Dict[str, ty.Any]] = {}
+
             if device_dict.get('dev_type') == fields.PciDeviceType.SRIOV_VF:
                 pcinet_info = self._get_pcinet_info(device, net_devs)
                 if pcinet_info:
                     return {'capabilities': {'network': pcinet_info}}
-            return {}
+            return caps
 
         xmlstr = dev.XMLDesc(0)
         cfgdev = vconfig.LibvirtConfigNodeDevice()
@@ -1255,10 +1262,53 @@ class Host(object):
 
         # requirement by DataBase Model
         device['label'] = 'label_%(vendor_id)s_%(product_id)s' % device
-        device.update(_get_device_type(cfgdev, address, dev, net_devs))
+        device.update(
+            _get_device_type(cfgdev, address, dev, net_devs, vdpa_devs))
         device.update(_get_device_capabilities(device, dev, net_devs))
         return device
 
+    def get_vdpa_nodedev_by_address(
+        self, pci_address: str,
+    ) -> vconfig.LibvirtConfigNodeDevice:
+        """Finds a vDPA device by the parent VF PCI device address.
+
+        :param pci_address: Parent PCI device address
+        :returns: A libvirt nodedev representing the vDPA device
+        :raises: StopIteration if not found
+        """
+        dev_flags = (
+            libvirt.VIR_CONNECT_LIST_NODE_DEVICES_CAP_VDPA |
+            libvirt.VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV
+        )
+        devices = {
+            dev.name(): dev for dev in
+            self.list_all_devices(flags=dev_flags)}
+        vdpa_devs = [
+            dev for dev in devices.values() if "vdpa" in dev.listCaps()]
+        pci_info = [
+            self._get_pcidev_info(name, dev, [], vdpa_devs) for name, dev
+            in devices.items() if "pci" in dev.listCaps()]
+        parent_dev = next(
+            dev for dev in pci_info if dev['address'] == pci_address)
+        vdpa_dev = next(
+            dev for dev in vdpa_devs if dev.parent() == parent_dev['dev_id'])
+        xmlstr = vdpa_dev.XMLDesc(0)
+        cfgdev = vconfig.LibvirtConfigNodeDevice()
+        cfgdev.parse_str(xmlstr)
+        return cfgdev
+
+    def get_vdpa_device_path(
+        self, pci_address: str,
+    ) -> str:
+        """Finds a vDPA device path by the parent VF PCI device address.
+
+        :param pci_address: Parent PCI device address
+        :returns: Device path as string
+        :raises: StopIteration if not found
+        """
+        nodedev = self.get_vdpa_nodedev_by_address(pci_address)
+        return nodedev.vdpa_capability.dev_path
+
     def list_pci_devices(self, flags=0):
         """Lookup pci devices.
 
-- 
2.17.1

